package counter;

import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.locks.ReentrantLock;

public class IncrementCounter {

	private static ReentrantLock lock = new ReentrantLock();
	private static int counter = 0;

	private static void incrementCounter() {
		lock.lock();
		try {
			for (int i = 0; i < 5; i++) {
				Thread.sleep(100);
				counter++;
				System.out.println(Thread.currentThread().getName() + " incremented the counter to :" + counter);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		finally {
			lock.unlock();
		}
	}
	
	public static void attemptLock() {
        // Try to acquire the lock without blocking
        if (lock.tryLock()) {
            try {
                System.out.println("Lock acquired successfully by:"+Thread.currentThread().getName());
                // Simulate some work
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            } finally {
                lock.unlock();
            }
        } else {
            System.out.println("Could not acquire lock, trying later for : "+Thread.currentThread().getName());
        }
    }

	public static void main(String[] args) {

		ExecutorService executor = Executors.newFixedThreadPool(2);

		executor.submit(() -> incrementCounter());
		executor.submit(() -> incrementCounter());

		
		executor.submit(() -> attemptLock());
		executor.submit(() -> attemptLock());
	}
}
